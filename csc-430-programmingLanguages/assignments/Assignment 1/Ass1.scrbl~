#lang scribble/manual
As the manager in charge of choosing the optimal programming language
for a “Self Driving Car”, I find it essential to take into consideration
a multitude of criteria for success. The first baseline point that needs
to be addressed is Safety. If the welfare of those within the vehicle as
well as those around it is not prioritized, there is a high chance of
catastrophic accidents occurring (at extreme levels, death). Therefore,
the language chosen must have a strong background in reliability and
structure so these misfortunes can be avoided. If not, these vehicles'
reputation will be irreparably tarnished within the industry. Another
standard that needs to be implemented is Real-Time Data Detection and
Processing. Due to these systems being implemented with AI technology,
they must be able to handle and process large amounts of video and image
data simultaneously. Without this, the system will not work, both in a
physical driving and system control (safety) sense. With this in mind,
it is important that the language can balance real-time direction and low
latency of its sensors, cameras, and hardware components. Further, it is
also vital that the language can handle frameworks and libraries used
alongside machine learning algorithms or else the artificial intelligence
will not be achievable. A final, third benchmark is Scalability. Due to
this product projected to grow in popularity and usage in the future, it
will most likely be deployed all across the nation, if not the world.
Because of this, it is important that the infrastructure can keep up with
technological developments and advancements. If not, a bug or glitch within
the program will not be directed and handled properly, causing the system
to malfunction and fail (potentially hurting those around it). Thus, it is
essential that the language used in the vehicle is able to advance and update
according to industry and economic progression.

For these reasons and more, I would suggest using C++ as the main programming
language when developing. This language is primarily known for its fine-grain
control over memory and resources, making it perfect for not only safety-critical
systems (such as self-driving cars), but for ensuring minimal runtime and delay.
Further, because of its strong hardware interaction ability, this language is
capable of extracting and handling extensive amounts of data that are intaken
from images, videos, and other object direction media. C++ is also praised for
its support of AI libraries such as Tensorflow and OpenCV, which can enable
instantaneous operations and perception decision-making for machine learning.
It is also important to note that C++ is a highly demanded and popular language
that most developers on the team would either know or could easily pick up. However,
if for some reason the board deems the C++ language unacceptable for industry
standards, I would urge the use of Rust. This is due to the language being a balance
of performance, safety, and reliability (similar to C++’s ability), while still
being able to hold unexpected errors and technological advancements that may occur
during development, ensuring quality. Nonetheless, it is important to keep in mind
that developing using Rust will cost more in resources and production rather than C++.

